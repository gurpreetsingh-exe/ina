extern "C" {
    fn printf(format: str, ...);

    fn open(path: str, mode: i64) -> i64;
    fn close(fd: i64);
    fn read(fd: i64, buf: raw, size: i64) -> i64;
    fn exit(code: i64);

    fn fstat(fd: i64, statbuf: raw) -> i64;

    fn malloc(size: i64) -> raw;
    fn calloc(nmemb: i64, size: i64) -> raw;
    fn free(ptr: raw);
    fn memcpy(dest: raw, src: i64, size: i64);
}

extern "intrinsic" {
    fn offset(ptr: raw, size: i64) -> raw;
}

//! opens a file and returns a file descriptor and file size
fn open_file(filepath: str, size: *i64) -> i64 {
    let fd = open(filepath, 0);
    if fd != 3 {
        printf("Cannot open file `%s`\n", filepath);
        exit(1);
    }
    //! sizeof(statbuf): 144
    let statbuf = malloc(144);
    fstat(fd, statbuf);
    memcpy(size as raw, statbuf as i64 + 48, 8);
    free(statbuf);
    fd
}

fn usage(arg0: str) {
    printf("Usage: %s input...\n", arg0);
    exit(1);
}

fn main(argc: i64, argv: *str) {
    if argc < 2 {
        usage(*argv);
    }

    let i = 1;
    loop {
        if i < argc {
            let off = i * 8;
            let filename: str = *(offset(argv as raw, off) as *str);
            let file_size = 0;
            let fd = open_file(filename, &file_size as *i64);
            let buf = calloc(file_size, 1);
            if read(fd, buf, file_size) != file_size {
                printf("Cannot read file\n");
            }
            close(fd);
            printf("%s", buf);
            free(buf);
            i = i + 1;
        } else {
            break;
        }
    }
}
